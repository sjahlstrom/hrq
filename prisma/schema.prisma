datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String       @id @default(cuid())
  externalUserId  String       @unique
  username        String?      @unique
  testResponse    Int[]
  associatedScale Int[]
  testCompleted   Boolean      @default(false)
  summedTotal     Float?
  paid_rq         Boolean      @default(false)
  paid_cq         Boolean      @default(false)
  banned          Boolean      @default(false)
  email           String?      @unique
  image           String?      @db.Text
  role            UserRole     @default(USER)
  accounts        Account[]
  preferences     Preferences?
  bio             Profile?
  purchases       Purchase[] // Changed from Purchased[] to Purchase[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Profile {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  occupation             String?
  education              String?
  incomeRange            String?
  postalCode             String?
  areaCode               String?
  birthday               DateTime?
  maritalStatus          String?
  relationshipTypeWanted String?
  biologicalSex          String?
  gender                 String?
  race                   String?
  smoker                 String?
  alcohol                String?
  drugs                  String?
  haveChildren           String?
  religion               String?
  primaryLanguage        String?
  otherLanguages         String?
  aboutYourself          String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Preferences {
  id                     String   @id @default(cuid())
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String   @unique
  education              String?
  incomeRange            String?
  maritalStatus          String?
  relationshipTypeWanted String?
  biologicalSex          String?
  gender                 String?
  race                   String?
  age                    String?
  dateSmoker             String?
  dateDrinker            String?
  dateMarijuanaUser      String?
  dateSomeoneWithKids    String?
  primaryLanguage        String?
  hasChildren            String?
  religion               String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Purchase {
  id              String                 @id @default(cuid())
  userId          String
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  paymentIntentId String
  status          String
  purchaseDate    DateTime
  items           PurchaseItemRelation[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@index([userId])
}

model PurchaseItemRelation {
  id         String   @id @default(cuid())
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id])
  quantity   Int      @default(1)
  price      Float // Store the price at time of purchase
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([purchaseId])
  @@index([itemId])
}

model Item {
  id          String                 @id @default(cuid())
  productName String                 @unique
  price       Float
  itemType    String
  purchases   PurchaseItemRelation[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("purchase_items")
}
