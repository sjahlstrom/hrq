// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String    @id @default(cuid())
  externalUserId  String    @unique
  username        String?   @unique
  testResponse    Int[]
  associatedScale Int[]
  testCompleted   Boolean   @default(false)
  summedTotal     Float?
  paid_rq         Boolean   @default(false)
  paid_cq         Boolean   @default(false)
  banned          Boolean   @default(false)
  email           String?   @unique
  password        String?
  areaCode        String?   @db.VarChar(3)
  zipCode         String?   @db.VarChar(5)
  image           String?   @db.Text
  bio             String?   @db.Text
  role            UserRole  @default(USER)
  accounts        Account[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Purchase  Purchase[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Test {
  id        String     @id @default(cuid())
  userId    String
  title     String     @db.Text
  price     Float?
  purchases Purchase[] // This is the relation field

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  testId    String? // Ensure testId is included here as well
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  test Test? @relation(fields: [testId], references: [id])

  @@unique([userId, testId]) // Add this line to create a unique constraint
}

model StripeCustomer {
  id               String @id @default(cuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
